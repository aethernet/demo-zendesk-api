import Head from 'next/head'
// import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { Formik, Form, Field, ErrorMessage } from 'formik'
import {useState} from 'react'

const inter = Inter({ subsets: ['latin'] })


interface Ticket {
  request: {
    subject: string 
    comment: {
      body: string
    }
    // description_mimetype: string
    custom_fields: {
      '29142157': "severity_1" | "severity_2" | "severity_3" | "severity_4"
    },
  }
}

const zendeskUrl = "https://premium.balena.io/api/v2/"
const SEVERITIES = ['severity_1', 'severity_2', 'severity_3', 'severity_4']

const submitTicket = (values: any) => {
  const endpoint = "requests"
  const { email, password, severity, description, subject} = values
  const ticket: Ticket = {
    request: {
      subject,
      comment: {body: description},
      // description_mimetype:	"text/plain",
      custom_fields: {
        '29142157': severity
      }
    }
  }
  fetch(
    `${zendeskUrl}${endpoint}`, 
    {
      method: 'POST', 
      headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'Authorization': `Basic ${Buffer.from(`${email}:${password}`).toString('base64')}`
      },
      body: JSON.stringify(ticket)
    }
  ).then(res => console.log(res))
}

export default function Home() {
  const [tickets, setTickets]: [any, any] = useState([])

  const fetchTickets = ({email, password}: {email: string, password: string}) => {
    const endpoint = "requests"
    fetch(
      `${zendeskUrl}${endpoint}`, 
      {
        method: 'GET', 
        headers: {
        'Accept': 'application/json',
        'Authorization': `Basic ${Buffer.from(`${email}:${password}`).toString('base64')}`
        },
      }
    ).then(res => res.json()).then(res => setTickets(res.requests))
  }

  return (
    <>
      <Head>
        <title>Balena Support Demo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        
        <h1>Balena Support Demo</h1>
        <h2>List Tickets</h2>
          <Formik
            initialValues = {{ email: '', password: ''}}
            validate={values => {
              const errors: any = {};
              if (!values.email) {
                errors.email = 'Required';
              } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)) {
                errors.email = 'Invalid email address';
              }
              if (!values.password) {
                errors.password = 'Required';
              }
              return errors;
            }}
            onSubmit={(values, { setSubmitting }) => {
              setTimeout(() => {
                fetchTickets(values);
                setSubmitting(false);
              }, 400);
            }}
          >
          {({
              values,
              errors,
              touched,
              handleChange,
              handleBlur,
              handleSubmit,
              isSubmitting,
              /* and other goodies */
            }) => (
              <Form>
                <h3>email</h3>
                <Field type="email" name="email" />
                <ErrorMessage name="email" component="div" />
                <h3>password</h3>
                <Field type="password" name="password" />
                <ErrorMessage name="password" component="div" />
                <br/>
                <button type="submit" disabled={isSubmitting}>Check</button>
              </Form>
            )
          }
          </Formik>
        {
          tickets.length < 1 
          ? (<h3>no tickets</h3>) 
          :(
            <ul>
              {tickets && tickets.map((ticket: any) => (
                <li key={ticket.id}>
                  {ticket.status} - {ticket.priority} - {ticket.subject} - {ticket.description}
                </li>  
              ))}
            </ul>
          )
        }
  
        <h2>New Ticket</h2>
        <Formik
          initialValues = {{ email: '', password: '', subject: '', description: '', severity: '' }}
          validate={values => {
            const errors: any = {};
            if (!values.email) {
              errors.email = 'Required';
            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)) {
              errors.email = 'Invalid email address';
            }
            if (!values.password) {
              errors.password = 'Required';
            }
            if (!values.description) {
              errors.description = 'Required';
            }
            if (!values.severity) {
              errors.severity = 'Required';
            }
            if (!SEVERITIES.includes(values.severity)) {
              errors.severity = 'Value is not allowed'
            }
            return errors;
          }}
          onSubmit={(values, { setSubmitting }) => {
            setTimeout(() => {
              submitTicket(values);
              setSubmitting(false);
            }, 400);
          }}
        >
          {
            ({
              values,
              errors,
              touched,
              handleChange,
              handleBlur,
              handleSubmit,
              isSubmitting,
              /* and other goodies */
            }) => (
              <Form>
                <h3>email</h3>
                <Field type="email" name="email" />
                <ErrorMessage name="email" component="div" />
                <h3>password</h3>
                <Field type="password" name="password" />
                <ErrorMessage name="password" component="div" />
                <h3>subject</h3>
                <Field type="text" name="subject" />
                <ErrorMessage name="subject" component="div" />
                <h3>description</h3>
                <Field type="text" name="description" />
                <ErrorMessage name="description" component="div" />
                <h3>severity</h3>
                <Field as="select" name="severity">
                  <option value="severity_1">1 - Urgent</option>
                  <option value="severity_2">2 - High</option>
                  <option value="severity_3">3 - Normal</option>
                  <option value="severity_4">4 - Low</option>
                </Field>
                <ErrorMessage name="severity" component="div" />
                <br/>
                <button type="submit" disabled={isSubmitting}>Post</button>
              </Form>
            )
          }
        </Formik>

        {!tickets && (
          <h3>No Tickets</h3>
        ) }
      </main>
    </>
  )
}
